# This is a basic CI/CD Pipline for Backend repository
# by: Ziad Mansour Mohamed

name: CI/CD PipLine BackEnd

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  # This workflow contains a Two jobs called "Testing - SShDeploy"


  # First Job
  Testing:
    name: "Run Tests on code"
    # The Runner would run on the latest version of ubuntu server
    runs-on: ubuntu-latest
    
    steps:
      # Task[1]: Get Clone Key on the Runner
      - name: Prepare the Clone Key on the runner && clone
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          echo "$SSH_Clone_KEY" > ~/.ssh/Clone.key
          chmod 600 ~/.ssh/Clone.key
          sudo cat >>~/.ssh/config <<END
            Host BackEndRepo
            Hostname github.com
            User git
            IdentityFile ~/.ssh/Clone.key
          END
          git clone BackEndRepo:AhmadGadallahMostafa/Flickr-Backend.git ~/BackEnd
        env:
          SSH_Clone_KEY: ${{ secrets.SSH_BackEnd_Clone_KEY }}
      
      # Task[2]: create bach scripts to ease Testing
      - name: Creat Testing.sh scripts
        run: |
          cat >>~/Testing.sh<<END
          #!/bin/bash
          echo "Testing Done..."
          ls ~/BackEnd && echo "empty"
          END
          chmod +x ~/Testing.sh
      
      # Task[3]: Run testing scripts Scripts
      - name: Run Testing.sh scripts
        run: ~/Testing.sh
  
  # Second Job
  SShDeploy:
    name: "SSh to server from Runner"
    # The Runner would run on the latest version of ubuntu server
    runs-on: ubuntu-latest
    needs: Testing
    
    steps:
      # Task[1]: create the SSH config file to ease the Accessing the server later
      - name: Creat SSh Config file
        run: |
          mkdir -p ~/.ssh/
          echo "$SSH_KEY" > ~/.ssh/staging.key
          chmod 600 ~/.ssh/staging.key
          cat >>~/.ssh/config <<END
          Host staging
            HostName $SSH_HOST
            User $SSH_USER
            IdentityFile ~/.ssh/staging.key
            StrictHostKeyChecking no
          END
        env:
          SSH_KEY: ${{ secrets.STAGING_SSH_KEY }}
          SSH_HOST: ${{ secrets.STAGING_SSH_HOST }}
          SSH_USER: ${{ secrets.STAGING_SSH_USER }}
      
      # Task[2]: create bach scripts to ease passing it run multiple commands
      - name: Creat Fetch.sh scripts
        run: |
          cat >>~/Fetch.sh<<EOF
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          echo "$SSH_Clone_KEY" > ~/.ssh/Clone.key
          chmod 600 ~/.ssh/Clone.key
          sudo cat >>~/.ssh/config <<END
            Host BackEndRepo
            Hostname github.com
            User git
            IdentityFile ~/.ssh/Clone.key
          END
          rm -rf ~/BackEnd && echo "removed BackEnd/"
          git clone BackEndRepo:AhmadGadallahMostafa/Flickr-Backend.git ~/BackEnd
          EOF
        env:
          SSH_Clone_KEY: ${{ secrets.SSH_BackEnd_Clone_KEY }}
      
      # Task[3]: Test by trying to SSH to the EC2 instance and pass the script to be excuted
      - name: Clone repos on server
        run: cat ~/Fetch.sh | ssh staging
      
      # Task[4]: Creat AfterDeploy.sh script to prepare backend code for production
      - name: Prepare script to Set Production enviroment for BackEnd Code
        run: |
          cat >>~/AfterDeploy.sh<<EOF
          cd ~/BackEnd/
          npm install
          cp ~/BackUp/.env ~/BackEnd/.env
          sudo rm -rf /var/www/docs/
          sudo mkdir -p /var/www/docs/
          sudo cp -r ~/BackEnd/'API Document'/* /var/www/docs/
          pm2 delete all
          pm2 start ~/BackEnd/server.js --watch --name "BackEnd Server"
          sudo systemctl restart nginx
          EOF
      
      # Task[5]: Excute AfterDeploy.sh
      - name: Set Production enviroment for BackEnd Code
        run: cat ~/AfterDeploy.sh | ssh staging